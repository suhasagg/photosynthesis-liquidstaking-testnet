// DONTCOVER
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: archway/photosynthesis/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryTotalLiquidStakeRequest is the request type for the
// Query/TotalLiquidStake RPC method.
type QueryTotalLiquidStakeRequest struct {
}

func (m *QueryTotalLiquidStakeRequest) Reset()         { *m = QueryTotalLiquidStakeRequest{} }
func (m *QueryTotalLiquidStakeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalLiquidStakeRequest) ProtoMessage()    {}
func (*QueryTotalLiquidStakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{2}
}
func (m *QueryTotalLiquidStakeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalLiquidStakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalLiquidStakeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalLiquidStakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalLiquidStakeRequest.Merge(m, src)
}
func (m *QueryTotalLiquidStakeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalLiquidStakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalLiquidStakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalLiquidStakeRequest proto.InternalMessageInfo

// QueryTotalLiquidStakeResponse is the response type for the
// Query/TotalLiquidStake RPC method.
type QueryTotalLiquidStakeResponse struct {
	TotalLiquidStake string `protobuf:"bytes,1,opt,name=total_liquid_stake,json=totalLiquidStake,proto3" json:"total_liquid_stake,omitempty"`
}

func (m *QueryTotalLiquidStakeResponse) Reset()         { *m = QueryTotalLiquidStakeResponse{} }
func (m *QueryTotalLiquidStakeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalLiquidStakeResponse) ProtoMessage()    {}
func (*QueryTotalLiquidStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{3}
}
func (m *QueryTotalLiquidStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalLiquidStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalLiquidStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalLiquidStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalLiquidStakeResponse.Merge(m, src)
}
func (m *QueryTotalLiquidStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalLiquidStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalLiquidStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalLiquidStakeResponse proto.InternalMessageInfo

func (m *QueryTotalLiquidStakeResponse) GetTotalLiquidStake() string {
	if m != nil {
		return m.TotalLiquidStake
	}
	return ""
}

// QueryDepositRecordsRequest is the request type for the Query/DepositRecords
// RPC method.
type QueryDepositRecordsRequest struct {
	ContractAddress string             `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Pagination      *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDepositRecordsRequest) Reset()         { *m = QueryDepositRecordsRequest{} }
func (m *QueryDepositRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepositRecordsRequest) ProtoMessage()    {}
func (*QueryDepositRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{4}
}
func (m *QueryDepositRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositRecordsRequest.Merge(m, src)
}
func (m *QueryDepositRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositRecordsRequest proto.InternalMessageInfo

func (m *QueryDepositRecordsRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *QueryDepositRecordsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDepositRecordsResponse is the response type for the Query/DepositRecords
// RPC method.
type QueryDepositRecordsResponse struct {
	DepositRecords []*DepositRecord    `protobuf:"bytes,1,rep,name=deposit_records,json=depositRecords,proto3" json:"deposit_records,omitempty"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDepositRecordsResponse) Reset()         { *m = QueryDepositRecordsResponse{} }
func (m *QueryDepositRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepositRecordsResponse) ProtoMessage()    {}
func (*QueryDepositRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{5}
}
func (m *QueryDepositRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositRecordsResponse.Merge(m, src)
}
func (m *QueryDepositRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositRecordsResponse proto.InternalMessageInfo

func (m *QueryDepositRecordsResponse) GetDepositRecords() []*DepositRecord {
	if m != nil {
		return m.DepositRecords
	}
	return nil
}

func (m *QueryDepositRecordsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRedemptionRateThresholdRequest is the request type for the
// Query/RedemptionRateThreshold RPC method.
type QueryRedemptionRateThresholdRequest struct {
}

func (m *QueryRedemptionRateThresholdRequest) Reset()         { *m = QueryRedemptionRateThresholdRequest{} }
func (m *QueryRedemptionRateThresholdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionRateThresholdRequest) ProtoMessage()    {}
func (*QueryRedemptionRateThresholdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{6}
}
func (m *QueryRedemptionRateThresholdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionRateThresholdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionRateThresholdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionRateThresholdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionRateThresholdRequest.Merge(m, src)
}
func (m *QueryRedemptionRateThresholdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionRateThresholdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionRateThresholdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionRateThresholdRequest proto.InternalMessageInfo

// QueryRedemptionRateThresholdResponse is the response type for the
// Query/ RPC method.
type QueryRedemptionRateThresholdResponse struct {
	RedemptionRateThreshold int64 `protobuf:"varint,1,opt,name=redemption_rate_threshold,json=redemptionRateThreshold,proto3" json:"redemption_rate_threshold,omitempty"`
}

func (m *QueryRedemptionRateThresholdResponse) Reset()         { *m = QueryRedemptionRateThresholdResponse{} }
func (m *QueryRedemptionRateThresholdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionRateThresholdResponse) ProtoMessage()    {}
func (*QueryRedemptionRateThresholdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{7}
}
func (m *QueryRedemptionRateThresholdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionRateThresholdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionRateThresholdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionRateThresholdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionRateThresholdResponse.Merge(m, src)
}
func (m *QueryRedemptionRateThresholdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionRateThresholdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionRateThresholdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionRateThresholdResponse proto.InternalMessageInfo

func (m *QueryRedemptionRateThresholdResponse) GetRedemptionRateThreshold() int64 {
	if m != nil {
		return m.RedemptionRateThreshold
	}
	return 0
}

// QueryRedemptionIntervalThresholdRequest is the request type for the
// Query/RedemptionIntervalThreshold RPC method.
type QueryRedemptionIntervalThresholdRequest struct {
}

func (m *QueryRedemptionIntervalThresholdRequest) Reset() {
	*m = QueryRedemptionIntervalThresholdRequest{}
}
func (m *QueryRedemptionIntervalThresholdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionIntervalThresholdRequest) ProtoMessage()    {}
func (*QueryRedemptionIntervalThresholdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{8}
}
func (m *QueryRedemptionIntervalThresholdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionIntervalThresholdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionIntervalThresholdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionIntervalThresholdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionIntervalThresholdRequest.Merge(m, src)
}
func (m *QueryRedemptionIntervalThresholdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionIntervalThresholdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionIntervalThresholdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionIntervalThresholdRequest proto.InternalMessageInfo

// QueryRedemptionIntervalThresholdResponse is the response type for the
// Query/RedemptionIntervalThreshold RPC method.
type QueryRedemptionIntervalThresholdResponse struct {
	RedemptionIntervalThreshold int64 `protobuf:"varint,1,opt,name=redemption_interval_threshold,json=redemptionIntervalThreshold,proto3" json:"redemption_interval_threshold,omitempty"`
}

func (m *QueryRedemptionIntervalThresholdResponse) Reset() {
	*m = QueryRedemptionIntervalThresholdResponse{}
}
func (m *QueryRedemptionIntervalThresholdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionIntervalThresholdResponse) ProtoMessage()    {}
func (*QueryRedemptionIntervalThresholdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{9}
}
func (m *QueryRedemptionIntervalThresholdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionIntervalThresholdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionIntervalThresholdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionIntervalThresholdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionIntervalThresholdResponse.Merge(m, src)
}
func (m *QueryRedemptionIntervalThresholdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionIntervalThresholdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionIntervalThresholdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionIntervalThresholdResponse proto.InternalMessageInfo

func (m *QueryRedemptionIntervalThresholdResponse) GetRedemptionIntervalThreshold() int64 {
	if m != nil {
		return m.RedemptionIntervalThreshold
	}
	return 0
}

type QueryStakeRatioRequest struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryStakeRatioRequest) Reset()         { *m = QueryStakeRatioRequest{} }
func (m *QueryStakeRatioRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRatioRequest) ProtoMessage()    {}
func (*QueryStakeRatioRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{10}
}
func (m *QueryStakeRatioRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRatioRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRatioRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRatioRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRatioRequest.Merge(m, src)
}
func (m *QueryStakeRatioRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRatioRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRatioRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRatioRequest proto.InternalMessageInfo

func (m *QueryStakeRatioRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type QueryStakeRatioResponse struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	StakeRatio      string `protobuf:"bytes,2,opt,name=stake_ratio,json=stakeRatio,proto3" json:"stake_ratio,omitempty"`
}

func (m *QueryStakeRatioResponse) Reset()         { *m = QueryStakeRatioResponse{} }
func (m *QueryStakeRatioResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRatioResponse) ProtoMessage()    {}
func (*QueryStakeRatioResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{11}
}
func (m *QueryStakeRatioResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRatioResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRatioResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRatioResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRatioResponse.Merge(m, src)
}
func (m *QueryStakeRatioResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRatioResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRatioResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRatioResponse proto.InternalMessageInfo

func (m *QueryStakeRatioResponse) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *QueryStakeRatioResponse) GetStakeRatio() string {
	if m != nil {
		return m.StakeRatio
	}
	return ""
}

type QueryAllStakeRatiosRequest struct {
}

func (m *QueryAllStakeRatiosRequest) Reset()         { *m = QueryAllStakeRatiosRequest{} }
func (m *QueryAllStakeRatiosRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakeRatiosRequest) ProtoMessage()    {}
func (*QueryAllStakeRatiosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{12}
}
func (m *QueryAllStakeRatiosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakeRatiosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakeRatiosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakeRatiosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakeRatiosRequest.Merge(m, src)
}
func (m *QueryAllStakeRatiosRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakeRatiosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakeRatiosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakeRatiosRequest proto.InternalMessageInfo

type QueryAllStakeRatiosResponse struct {
	StakeRatios []*StakeRatio `protobuf:"bytes,1,rep,name=stake_ratios,json=stakeRatios,proto3" json:"stake_ratios,omitempty"`
}

func (m *QueryAllStakeRatiosResponse) Reset()         { *m = QueryAllStakeRatiosResponse{} }
func (m *QueryAllStakeRatiosResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakeRatiosResponse) ProtoMessage()    {}
func (*QueryAllStakeRatiosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{13}
}
func (m *QueryAllStakeRatiosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakeRatiosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakeRatiosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakeRatiosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakeRatiosResponse.Merge(m, src)
}
func (m *QueryAllStakeRatiosResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakeRatiosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakeRatiosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakeRatiosResponse proto.InternalMessageInfo

func (m *QueryAllStakeRatiosResponse) GetStakeRatios() []*StakeRatio {
	if m != nil {
		return m.StakeRatios
	}
	return nil
}

type StakeRatio struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	StakeRatio      string `protobuf:"bytes,2,opt,name=stake_ratio,json=stakeRatio,proto3" json:"stake_ratio,omitempty"`
}

func (m *StakeRatio) Reset()         { *m = StakeRatio{} }
func (m *StakeRatio) String() string { return proto.CompactTextString(m) }
func (*StakeRatio) ProtoMessage()    {}
func (*StakeRatio) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{14}
}
func (m *StakeRatio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeRatio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeRatio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeRatio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeRatio.Merge(m, src)
}
func (m *StakeRatio) XXX_Size() int {
	return m.Size()
}
func (m *StakeRatio) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeRatio.DiscardUnknown(m)
}

var xxx_messageInfo_StakeRatio proto.InternalMessageInfo

func (m *StakeRatio) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *StakeRatio) GetStakeRatio() string {
	if m != nil {
		return m.StakeRatio
	}
	return ""
}

type QueryRedeemTokenRatiosRequest struct {
}

func (m *QueryRedeemTokenRatiosRequest) Reset()         { *m = QueryRedeemTokenRatiosRequest{} }
func (m *QueryRedeemTokenRatiosRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRedeemTokenRatiosRequest) ProtoMessage()    {}
func (*QueryRedeemTokenRatiosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{15}
}
func (m *QueryRedeemTokenRatiosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedeemTokenRatiosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedeemTokenRatiosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedeemTokenRatiosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedeemTokenRatiosRequest.Merge(m, src)
}
func (m *QueryRedeemTokenRatiosRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedeemTokenRatiosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedeemTokenRatiosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedeemTokenRatiosRequest proto.InternalMessageInfo

type RedeemTokenRatio struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	RedeemRatio     string `protobuf:"bytes,2,opt,name=redeem_ratio,json=redeemRatio,proto3" json:"redeem_ratio,omitempty"`
}

func (m *RedeemTokenRatio) Reset()         { *m = RedeemTokenRatio{} }
func (m *RedeemTokenRatio) String() string { return proto.CompactTextString(m) }
func (*RedeemTokenRatio) ProtoMessage()    {}
func (*RedeemTokenRatio) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{16}
}
func (m *RedeemTokenRatio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedeemTokenRatio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedeemTokenRatio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedeemTokenRatio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedeemTokenRatio.Merge(m, src)
}
func (m *RedeemTokenRatio) XXX_Size() int {
	return m.Size()
}
func (m *RedeemTokenRatio) XXX_DiscardUnknown() {
	xxx_messageInfo_RedeemTokenRatio.DiscardUnknown(m)
}

var xxx_messageInfo_RedeemTokenRatio proto.InternalMessageInfo

func (m *RedeemTokenRatio) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *RedeemTokenRatio) GetRedeemRatio() string {
	if m != nil {
		return m.RedeemRatio
	}
	return ""
}

type QueryRedeemTokenRatiosResponse struct {
	RedeemRatios []*RedeemTokenRatio `protobuf:"bytes,1,rep,name=redeem_ratios,json=redeemRatios,proto3" json:"redeem_ratios,omitempty"`
}

func (m *QueryRedeemTokenRatiosResponse) Reset()         { *m = QueryRedeemTokenRatiosResponse{} }
func (m *QueryRedeemTokenRatiosResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRedeemTokenRatiosResponse) ProtoMessage()    {}
func (*QueryRedeemTokenRatiosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{17}
}
func (m *QueryRedeemTokenRatiosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedeemTokenRatiosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedeemTokenRatiosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedeemTokenRatiosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedeemTokenRatiosResponse.Merge(m, src)
}
func (m *QueryRedeemTokenRatiosResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedeemTokenRatiosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedeemTokenRatiosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedeemTokenRatiosResponse proto.InternalMessageInfo

func (m *QueryRedeemTokenRatiosResponse) GetRedeemRatios() []*RedeemTokenRatio {
	if m != nil {
		return m.RedeemRatios
	}
	return nil
}

// Query request for all redeem token ratios.
type QueryAllRedeemTokenRatiosRequest struct {
}

func (m *QueryAllRedeemTokenRatiosRequest) Reset()         { *m = QueryAllRedeemTokenRatiosRequest{} }
func (m *QueryAllRedeemTokenRatiosRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRedeemTokenRatiosRequest) ProtoMessage()    {}
func (*QueryAllRedeemTokenRatiosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{18}
}
func (m *QueryAllRedeemTokenRatiosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRedeemTokenRatiosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRedeemTokenRatiosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRedeemTokenRatiosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRedeemTokenRatiosRequest.Merge(m, src)
}
func (m *QueryAllRedeemTokenRatiosRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRedeemTokenRatiosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRedeemTokenRatiosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRedeemTokenRatiosRequest proto.InternalMessageInfo

// Query response containing all redeem token ratios.
type QueryAllRedeemTokenRatiosResponse struct {
	RedeemTokenRatios []*RedeemTokenRatio `protobuf:"bytes,1,rep,name=redeem_token_ratios,json=redeemTokenRatios,proto3" json:"redeem_token_ratios,omitempty"`
}

func (m *QueryAllRedeemTokenRatiosResponse) Reset()         { *m = QueryAllRedeemTokenRatiosResponse{} }
func (m *QueryAllRedeemTokenRatiosResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRedeemTokenRatiosResponse) ProtoMessage()    {}
func (*QueryAllRedeemTokenRatiosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{19}
}
func (m *QueryAllRedeemTokenRatiosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRedeemTokenRatiosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRedeemTokenRatiosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRedeemTokenRatiosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRedeemTokenRatiosResponse.Merge(m, src)
}
func (m *QueryAllRedeemTokenRatiosResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRedeemTokenRatiosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRedeemTokenRatiosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRedeemTokenRatiosResponse proto.InternalMessageInfo

func (m *QueryAllRedeemTokenRatiosResponse) GetRedeemTokenRatios() []*RedeemTokenRatio {
	if m != nil {
		return m.RedeemTokenRatios
	}
	return nil
}

// Query request for total redemption amount.
type QueryTotalRedemptionAmountRequest struct {
}

func (m *QueryTotalRedemptionAmountRequest) Reset()         { *m = QueryTotalRedemptionAmountRequest{} }
func (m *QueryTotalRedemptionAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalRedemptionAmountRequest) ProtoMessage()    {}
func (*QueryTotalRedemptionAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{20}
}
func (m *QueryTotalRedemptionAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalRedemptionAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalRedemptionAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalRedemptionAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalRedemptionAmountRequest.Merge(m, src)
}
func (m *QueryTotalRedemptionAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalRedemptionAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalRedemptionAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalRedemptionAmountRequest proto.InternalMessageInfo

// Query response for total redemption amount.
type QueryTotalRedemptionAmountResponse struct {
	TotalAmount string `protobuf:"bytes,1,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
}

func (m *QueryTotalRedemptionAmountResponse) Reset()         { *m = QueryTotalRedemptionAmountResponse{} }
func (m *QueryTotalRedemptionAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalRedemptionAmountResponse) ProtoMessage()    {}
func (*QueryTotalRedemptionAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d6e8948b7cb5c49, []int{21}
}
func (m *QueryTotalRedemptionAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalRedemptionAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalRedemptionAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalRedemptionAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalRedemptionAmountResponse.Merge(m, src)
}
func (m *QueryTotalRedemptionAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalRedemptionAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalRedemptionAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalRedemptionAmountResponse proto.InternalMessageInfo

func (m *QueryTotalRedemptionAmountResponse) GetTotalAmount() string {
	if m != nil {
		return m.TotalAmount
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "archway.photosynthesis.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "archway.photosynthesis.v1.QueryParamsResponse")
	proto.RegisterType((*QueryTotalLiquidStakeRequest)(nil), "archway.photosynthesis.v1.QueryTotalLiquidStakeRequest")
	proto.RegisterType((*QueryTotalLiquidStakeResponse)(nil), "archway.photosynthesis.v1.QueryTotalLiquidStakeResponse")
	proto.RegisterType((*QueryDepositRecordsRequest)(nil), "archway.photosynthesis.v1.QueryDepositRecordsRequest")
	proto.RegisterType((*QueryDepositRecordsResponse)(nil), "archway.photosynthesis.v1.QueryDepositRecordsResponse")
	proto.RegisterType((*QueryRedemptionRateThresholdRequest)(nil), "archway.photosynthesis.v1.QueryRedemptionRateThresholdRequest")
	proto.RegisterType((*QueryRedemptionRateThresholdResponse)(nil), "archway.photosynthesis.v1.QueryRedemptionRateThresholdResponse")
	proto.RegisterType((*QueryRedemptionIntervalThresholdRequest)(nil), "archway.photosynthesis.v1.QueryRedemptionIntervalThresholdRequest")
	proto.RegisterType((*QueryRedemptionIntervalThresholdResponse)(nil), "archway.photosynthesis.v1.QueryRedemptionIntervalThresholdResponse")
	proto.RegisterType((*QueryStakeRatioRequest)(nil), "archway.photosynthesis.v1.QueryStakeRatioRequest")
	proto.RegisterType((*QueryStakeRatioResponse)(nil), "archway.photosynthesis.v1.QueryStakeRatioResponse")
	proto.RegisterType((*QueryAllStakeRatiosRequest)(nil), "archway.photosynthesis.v1.QueryAllStakeRatiosRequest")
	proto.RegisterType((*QueryAllStakeRatiosResponse)(nil), "archway.photosynthesis.v1.QueryAllStakeRatiosResponse")
	proto.RegisterType((*StakeRatio)(nil), "archway.photosynthesis.v1.StakeRatio")
	proto.RegisterType((*QueryRedeemTokenRatiosRequest)(nil), "archway.photosynthesis.v1.QueryRedeemTokenRatiosRequest")
	proto.RegisterType((*RedeemTokenRatio)(nil), "archway.photosynthesis.v1.RedeemTokenRatio")
	proto.RegisterType((*QueryRedeemTokenRatiosResponse)(nil), "archway.photosynthesis.v1.QueryRedeemTokenRatiosResponse")
	proto.RegisterType((*QueryAllRedeemTokenRatiosRequest)(nil), "archway.photosynthesis.v1.QueryAllRedeemTokenRatiosRequest")
	proto.RegisterType((*QueryAllRedeemTokenRatiosResponse)(nil), "archway.photosynthesis.v1.QueryAllRedeemTokenRatiosResponse")
	proto.RegisterType((*QueryTotalRedemptionAmountRequest)(nil), "archway.photosynthesis.v1.QueryTotalRedemptionAmountRequest")
	proto.RegisterType((*QueryTotalRedemptionAmountResponse)(nil), "archway.photosynthesis.v1.QueryTotalRedemptionAmountResponse")
}

func init() {
	proto.RegisterFile("archway/photosynthesis/query.proto", fileDescriptor_7d6e8948b7cb5c49)
}

var fileDescriptor_7d6e8948b7cb5c49 = []byte{
	// 1016 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xb3, 0x2d, 0x44, 0xea, 0xb3, 0x49, 0xd3, 0x69, 0x21, 0xe9, 0x26, 0xdd, 0xc4, 0x1b,
	0x4a, 0x13, 0x4a, 0x76, 0x95, 0x40, 0x4b, 0x5a, 0xb5, 0x84, 0xa4, 0x40, 0x41, 0x02, 0x29, 0xdd,
	0x46, 0x08, 0xc1, 0xc1, 0x8c, 0xed, 0xc1, 0x5e, 0xc5, 0xde, 0xd9, 0xcc, 0x8c, 0x53, 0x22, 0x84,
	0x40, 0x3d, 0x71, 0x03, 0x01, 0xff, 0x0c, 0x12, 0x67, 0xd4, 0x63, 0x25, 0x2e, 0x3d, 0x21, 0x94,
	0x70, 0xe0, 0xcf, 0x40, 0x3b, 0x33, 0x1b, 0x7b, 0xd7, 0xde, 0x5d, 0x3b, 0xe5, 0x96, 0xcc, 0xfb,
	0xf5, 0x79, 0xf3, 0xde, 0xce, 0x57, 0x06, 0x1b, 0xb3, 0x7a, 0xeb, 0x11, 0x3e, 0x74, 0xc3, 0x16,
	0x15, 0x94, 0x1f, 0x06, 0xa2, 0x45, 0xb8, 0xcf, 0xdd, 0xfd, 0x2e, 0x61, 0x87, 0x4e, 0xc8, 0xa8,
	0xa0, 0xe8, 0xb2, 0xf6, 0x71, 0x92, 0x3e, 0xce, 0xc1, 0x9a, 0x79, 0xa9, 0x49, 0x9b, 0x54, 0x7a,
	0xb9, 0xd1, 0x5f, 0x2a, 0xc0, 0x5c, 0x68, 0x52, 0xda, 0x6c, 0x13, 0x57, 0xfe, 0x57, 0xeb, 0x7e,
	0xe5, 0x0a, 0xbf, 0x43, 0xb8, 0xc0, 0x9d, 0x50, 0x3b, 0xbc, 0x5e, 0xa7, 0xbc, 0x43, 0xb9, 0x5b,
	0xc3, 0x9c, 0xa8, 0x52, 0xee, 0xc1, 0x5a, 0x8d, 0x08, 0xbc, 0xe6, 0x86, 0xb8, 0xe9, 0x07, 0x58,
	0xf8, 0x34, 0xd0, 0xbe, 0x56, 0xbf, 0x6f, 0xec, 0x55, 0xa7, 0x7e, 0x6c, 0x9f, 0xd7, 0xc5, 0x70,
	0xe8, 0xbb, 0x38, 0x08, 0xa8, 0x90, 0xc1, 0x5c, 0x5b, 0xaf, 0x67, 0xf4, 0x97, 0x6a, 0x45, 0x3a,
	0xdb, 0x97, 0x00, 0x3d, 0x88, 0x60, 0x76, 0x30, 0xc3, 0x1d, 0xee, 0x91, 0xfd, 0x2e, 0xe1, 0xc2,
	0xfe, 0x14, 0x2e, 0x26, 0x4e, 0x79, 0x48, 0x03, 0x4e, 0xd0, 0x26, 0x4c, 0x86, 0xf2, 0x64, 0xd6,
	0x58, 0x34, 0x96, 0x4b, 0xeb, 0x15, 0x27, 0xf3, 0x9a, 0x1c, 0x15, 0xba, 0xfd, 0xc2, 0x93, 0xbf,
	0x16, 0x26, 0x3c, 0x1d, 0x66, 0x5b, 0x30, 0x2f, 0xf3, 0xee, 0x52, 0x81, 0xdb, 0x1f, 0xfb, 0xfb,
	0x5d, 0xbf, 0xf1, 0x50, 0xe0, 0x3d, 0x12, 0xd7, 0xfd, 0x04, 0xae, 0x64, 0xd8, 0x35, 0xc1, 0x1b,
	0x80, 0x44, 0x64, 0xab, 0xb6, 0xa5, 0xb1, 0xca, 0x23, 0xab, 0xa4, 0x39, 0xe7, 0x4d, 0x8b, 0x54,
	0x94, 0xfd, 0xa3, 0x01, 0xa6, 0xcc, 0xf7, 0x1e, 0x09, 0x29, 0xf7, 0x85, 0x47, 0xea, 0x94, 0x35,
	0xe2, 0x2e, 0xd1, 0x0a, 0x4c, 0xd7, 0x69, 0x20, 0x18, 0xae, 0x8b, 0x2a, 0x6e, 0x34, 0x18, 0xe1,
	0x5c, 0xa7, 0x3a, 0x1f, 0x9f, 0x6f, 0xa9, 0x63, 0xf4, 0x01, 0x40, 0x6f, 0x4a, 0xb3, 0x67, 0x64,
	0xf7, 0xaf, 0x39, 0x6a, 0x4c, 0x4e, 0x34, 0x26, 0x47, 0x6d, 0x8f, 0x1e, 0x96, 0xb3, 0x83, 0x9b,
	0x71, 0x53, 0x5e, 0x5f, 0xa4, 0xfd, 0x9b, 0x01, 0x73, 0x43, 0x89, 0x74, 0x7f, 0x0f, 0xe0, 0x7c,
	0x43, 0x59, 0xaa, 0x4c, 0x99, 0x66, 0x8d, 0xc5, 0xb3, 0xcb, 0xa5, 0xf5, 0xe5, 0x9c, 0xab, 0x4e,
	0xe4, 0xf2, 0xa6, 0x1a, 0x89, 0xd4, 0xe8, 0xfe, 0x10, 0xf4, 0x6b, 0x85, 0xe8, 0x8a, 0x27, 0xc1,
	0x7e, 0x15, 0x96, 0x24, 0xba, 0x47, 0x1a, 0xa4, 0x13, 0x46, 0x47, 0x1e, 0x16, 0x64, 0xb7, 0xc5,
	0x08, 0x6f, 0xd1, 0x76, 0x23, 0x9e, 0x61, 0x0d, 0x5e, 0xcd, 0x77, 0xd3, 0xad, 0xde, 0x86, 0xcb,
	0xec, 0xc4, 0xa5, 0xca, 0xb0, 0x20, 0x55, 0x11, 0x3b, 0xc9, 0x31, 0x9c, 0xf5, 0x66, 0xd8, 0xf0,
	0x1c, 0xf6, 0x0a, 0x5c, 0x4b, 0xd5, 0xf8, 0x28, 0x10, 0x84, 0x1d, 0xe0, 0xf6, 0x00, 0x4e, 0x00,
	0xcb, 0xc5, 0xae, 0x1a, 0x69, 0x1b, 0xae, 0xf4, 0x21, 0xf9, 0xda, 0x6f, 0x00, 0x6b, 0x8e, 0x65,
	0xe7, 0xb2, 0xef, 0xc1, 0x2b, 0xb2, 0x9e, 0xda, 0xdb, 0xe8, 0xe6, 0xc6, 0x5f, 0x37, 0x9b, 0xc0,
	0xcc, 0x40, 0x12, 0xcd, 0x38, 0xc6, 0xd2, 0x2e, 0x40, 0x49, 0x7e, 0x1f, 0xd1, 0xe5, 0xfa, 0x54,
	0x8e, 0xfe, 0x9c, 0x07, 0xfc, 0x24, 0xa7, 0x3d, 0xaf, 0x3f, 0x8f, 0xad, 0x76, 0xbb, 0x57, 0xe9,
	0xe4, 0x11, 0x68, 0xea, 0x55, 0x4d, 0x5b, 0x35, 0xc8, 0x87, 0x50, 0xee, 0xcb, 0x1e, 0xef, 0xe9,
	0xd5, 0x9c, 0x3d, 0xed, 0xeb, 0xa6, 0xd4, 0xa3, 0xe0, 0xf6, 0x67, 0x00, 0x3d, 0xd3, 0xff, 0xda,
	0xe0, 0x82, 0x7e, 0x4f, 0xa2, 0xe1, 0x93, 0xce, 0x2e, 0xdd, 0x23, 0x41, 0xb2, 0xc7, 0x2f, 0x61,
	0x3a, 0x6d, 0x1b, 0x07, 0xa0, 0x02, 0x65, 0x26, 0xc3, 0x13, 0x04, 0x25, 0x75, 0xa6, 0x10, 0x18,
	0x58, 0x59, 0x08, 0xfa, 0x22, 0x77, 0xe0, 0xa5, 0xfe, 0x24, 0xf1, 0x4d, 0x5e, 0xcf, 0xb9, 0xc9,
	0x74, 0x32, 0xaf, 0xdc, 0x57, 0x92, 0xdb, 0x36, 0x2c, 0xc6, 0x93, 0xcb, 0xec, 0xfc, 0x7b, 0x03,
	0x2a, 0x39, 0x4e, 0x9a, 0xed, 0x0b, 0xb8, 0xa8, 0xd9, 0x44, 0x64, 0x7d, 0x0e, 0xc2, 0x0b, 0x2c,
	0x5d, 0xc4, 0x5e, 0xd2, 0x04, 0xf2, 0xb5, 0xef, 0x7d, 0x9f, 0x5b, 0x1d, 0xda, 0x0d, 0x44, 0xcc,
	0x79, 0x1f, 0xec, 0x3c, 0x27, 0xcd, 0x59, 0x81, 0xb2, 0xd2, 0x05, 0x2c, 0xcf, 0xf5, 0xbc, 0x4a,
	0xf2, 0x4c, 0xb9, 0xae, 0x3f, 0x2e, 0xc3, 0x8b, 0x32, 0x13, 0xfa, 0xd9, 0x80, 0x49, 0x25, 0x4f,
	0x68, 0x35, 0xa7, 0x85, 0x41, 0x5d, 0x34, 0x9d, 0x51, 0xdd, 0x15, 0x96, 0xbd, 0xf2, 0xf8, 0xcf,
	0x7f, 0x7e, 0x39, 0xb3, 0x84, 0x2a, 0x6e, 0x86, 0x26, 0x1f, 0x44, 0xea, 0x2f, 0x49, 0x7e, 0x37,
	0x60, 0x3a, 0x2d, 0x7b, 0xe8, 0xed, 0xa2, 0x7a, 0x19, 0x42, 0x6a, 0x6e, 0x8c, 0x1f, 0xa8, 0x91,
	0x6f, 0x48, 0x64, 0x17, 0xad, 0xe6, 0x20, 0x0f, 0x4a, 0x30, 0xfa, 0xc3, 0x80, 0xa9, 0xa4, 0xa6,
	0xa1, 0x1b, 0x45, 0x0c, 0x43, 0x55, 0xd9, 0xbc, 0x39, 0x6e, 0x98, 0x06, 0x7f, 0x5f, 0x82, 0x6f,
	0xa2, 0xbb, 0x39, 0xe0, 0x29, 0x6d, 0x75, 0xbf, 0x49, 0x7f, 0xe8, 0xdf, 0xa2, 0x67, 0x06, 0xcc,
	0x64, 0x48, 0x17, 0x7a, 0xa7, 0x08, 0x2d, 0x5f, 0x1a, 0xcd, 0xcd, 0x53, 0xc7, 0xeb, 0x1e, 0xef,
	0xc8, 0x1e, 0x6f, 0xa2, 0xb7, 0x72, 0x7a, 0xcc, 0x14, 0x55, 0xf4, 0xaf, 0x01, 0x73, 0x39, 0x32,
	0x88, 0xb6, 0x47, 0xc7, 0xcb, 0x92, 0x5b, 0xf3, 0xde, 0x73, 0xe5, 0xd0, 0x6d, 0xbe, 0x2b, 0xdb,
	0xbc, 0x8d, 0x36, 0x46, 0x6b, 0x73, 0x50, 0xa8, 0x11, 0x4f, 0x48, 0xca, 0x5a, 0x11, 0xd4, 0x80,
	0x58, 0x9b, 0xeb, 0xe3, 0x84, 0xe8, 0x47, 0xe8, 0x3b, 0x98, 0x4a, 0x6a, 0x65, 0xf1, 0x27, 0x30,
	0x54, 0x79, 0x8b, 0x3f, 0x81, 0x0c, 0x49, 0xfe, 0xc1, 0x80, 0x0b, 0x03, 0x6f, 0x39, 0xda, 0x18,
	0x65, 0x24, 0xc3, 0x34, 0xc2, 0xbc, 0x75, 0x8a, 0x48, 0x8d, 0xf2, 0xab, 0x01, 0x2f, 0x0f, 0x7d,
	0xb2, 0xd1, 0x9d, 0x91, 0x9e, 0xa6, 0x0c, 0x39, 0x30, 0xef, 0x9e, 0x32, 0x5a, 0x61, 0x6d, 0x3f,
	0x7c, 0x72, 0x64, 0x19, 0x4f, 0x8f, 0x2c, 0xe3, 0xef, 0x23, 0xcb, 0xf8, 0xe9, 0xd8, 0x9a, 0x78,
	0x7a, 0x6c, 0x4d, 0x3c, 0x3b, 0xb6, 0x26, 0x3e, 0xbf, 0xd5, 0xf4, 0x45, 0xab, 0x5b, 0x73, 0xea,
	0xb4, 0x13, 0x6f, 0xdd, 0x6a, 0x40, 0xc4, 0x23, 0xca, 0xf6, 0x4e, 0xb6, 0xf0, 0xeb, 0xf4, 0x1e,
	0x8a, 0xc3, 0x90, 0xf0, 0xda, 0xa4, 0xfc, 0x29, 0xf5, 0xe6, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x1c, 0xe4, 0x95, 0xb4, 0x59, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	TotalLiquidStake(ctx context.Context, in *QueryTotalLiquidStakeRequest, opts ...grpc.CallOption) (*QueryTotalLiquidStakeResponse, error)
	DepositRecords(ctx context.Context, in *QueryDepositRecordsRequest, opts ...grpc.CallOption) (*QueryDepositRecordsResponse, error)
	RedemptionRateThreshold(ctx context.Context, in *QueryRedemptionRateThresholdRequest, opts ...grpc.CallOption) (*QueryRedemptionRateThresholdResponse, error)
	RedemptionIntervalThreshold(ctx context.Context, in *QueryRedemptionIntervalThresholdRequest, opts ...grpc.CallOption) (*QueryRedemptionIntervalThresholdResponse, error)
	StakeRatio(ctx context.Context, in *QueryStakeRatioRequest, opts ...grpc.CallOption) (*QueryStakeRatioResponse, error)
	AllStakeRatios(ctx context.Context, in *QueryAllStakeRatiosRequest, opts ...grpc.CallOption) (*QueryAllStakeRatiosResponse, error)
	RedeemTokenRatios(ctx context.Context, in *QueryRedeemTokenRatiosRequest, opts ...grpc.CallOption) (*QueryRedeemTokenRatiosResponse, error)
	// Query the total redemption amount.
	TotalRedemptionAmount(ctx context.Context, in *QueryTotalRedemptionAmountRequest, opts ...grpc.CallOption) (*QueryTotalRedemptionAmountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/archway.photosynthesis.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalLiquidStake(ctx context.Context, in *QueryTotalLiquidStakeRequest, opts ...grpc.CallOption) (*QueryTotalLiquidStakeResponse, error) {
	out := new(QueryTotalLiquidStakeResponse)
	err := c.cc.Invoke(ctx, "/archway.photosynthesis.v1.Query/TotalLiquidStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositRecords(ctx context.Context, in *QueryDepositRecordsRequest, opts ...grpc.CallOption) (*QueryDepositRecordsResponse, error) {
	out := new(QueryDepositRecordsResponse)
	err := c.cc.Invoke(ctx, "/archway.photosynthesis.v1.Query/DepositRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RedemptionRateThreshold(ctx context.Context, in *QueryRedemptionRateThresholdRequest, opts ...grpc.CallOption) (*QueryRedemptionRateThresholdResponse, error) {
	out := new(QueryRedemptionRateThresholdResponse)
	err := c.cc.Invoke(ctx, "/archway.photosynthesis.v1.Query/RedemptionRateThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RedemptionIntervalThreshold(ctx context.Context, in *QueryRedemptionIntervalThresholdRequest, opts ...grpc.CallOption) (*QueryRedemptionIntervalThresholdResponse, error) {
	out := new(QueryRedemptionIntervalThresholdResponse)
	err := c.cc.Invoke(ctx, "/archway.photosynthesis.v1.Query/RedemptionIntervalThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakeRatio(ctx context.Context, in *QueryStakeRatioRequest, opts ...grpc.CallOption) (*QueryStakeRatioResponse, error) {
	out := new(QueryStakeRatioResponse)
	err := c.cc.Invoke(ctx, "/archway.photosynthesis.v1.Query/StakeRatio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllStakeRatios(ctx context.Context, in *QueryAllStakeRatiosRequest, opts ...grpc.CallOption) (*QueryAllStakeRatiosResponse, error) {
	out := new(QueryAllStakeRatiosResponse)
	err := c.cc.Invoke(ctx, "/archway.photosynthesis.v1.Query/AllStakeRatios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RedeemTokenRatios(ctx context.Context, in *QueryRedeemTokenRatiosRequest, opts ...grpc.CallOption) (*QueryRedeemTokenRatiosResponse, error) {
	out := new(QueryRedeemTokenRatiosResponse)
	err := c.cc.Invoke(ctx, "/archway.photosynthesis.v1.Query/RedeemTokenRatios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalRedemptionAmount(ctx context.Context, in *QueryTotalRedemptionAmountRequest, opts ...grpc.CallOption) (*QueryTotalRedemptionAmountResponse, error) {
	out := new(QueryTotalRedemptionAmountResponse)
	err := c.cc.Invoke(ctx, "/archway.photosynthesis.v1.Query/TotalRedemptionAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	TotalLiquidStake(context.Context, *QueryTotalLiquidStakeRequest) (*QueryTotalLiquidStakeResponse, error)
	DepositRecords(context.Context, *QueryDepositRecordsRequest) (*QueryDepositRecordsResponse, error)
	RedemptionRateThreshold(context.Context, *QueryRedemptionRateThresholdRequest) (*QueryRedemptionRateThresholdResponse, error)
	RedemptionIntervalThreshold(context.Context, *QueryRedemptionIntervalThresholdRequest) (*QueryRedemptionIntervalThresholdResponse, error)
	StakeRatio(context.Context, *QueryStakeRatioRequest) (*QueryStakeRatioResponse, error)
	AllStakeRatios(context.Context, *QueryAllStakeRatiosRequest) (*QueryAllStakeRatiosResponse, error)
	RedeemTokenRatios(context.Context, *QueryRedeemTokenRatiosRequest) (*QueryRedeemTokenRatiosResponse, error)
	// Query the total redemption amount.
	TotalRedemptionAmount(context.Context, *QueryTotalRedemptionAmountRequest) (*QueryTotalRedemptionAmountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) TotalLiquidStake(ctx context.Context, req *QueryTotalLiquidStakeRequest) (*QueryTotalLiquidStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalLiquidStake not implemented")
}
func (*UnimplementedQueryServer) DepositRecords(ctx context.Context, req *QueryDepositRecordsRequest) (*QueryDepositRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositRecords not implemented")
}
func (*UnimplementedQueryServer) RedemptionRateThreshold(ctx context.Context, req *QueryRedemptionRateThresholdRequest) (*QueryRedemptionRateThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedemptionRateThreshold not implemented")
}
func (*UnimplementedQueryServer) RedemptionIntervalThreshold(ctx context.Context, req *QueryRedemptionIntervalThresholdRequest) (*QueryRedemptionIntervalThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedemptionIntervalThreshold not implemented")
}
func (*UnimplementedQueryServer) StakeRatio(ctx context.Context, req *QueryStakeRatioRequest) (*QueryStakeRatioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeRatio not implemented")
}
func (*UnimplementedQueryServer) AllStakeRatios(ctx context.Context, req *QueryAllStakeRatiosRequest) (*QueryAllStakeRatiosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllStakeRatios not implemented")
}
func (*UnimplementedQueryServer) RedeemTokenRatios(ctx context.Context, req *QueryRedeemTokenRatiosRequest) (*QueryRedeemTokenRatiosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemTokenRatios not implemented")
}
func (*UnimplementedQueryServer) TotalRedemptionAmount(ctx context.Context, req *QueryTotalRedemptionAmountRequest) (*QueryTotalRedemptionAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalRedemptionAmount not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archway.photosynthesis.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalLiquidStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalLiquidStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalLiquidStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archway.photosynthesis.v1.Query/TotalLiquidStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalLiquidStake(ctx, req.(*QueryTotalLiquidStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archway.photosynthesis.v1.Query/DepositRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositRecords(ctx, req.(*QueryDepositRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RedemptionRateThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedemptionRateThresholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RedemptionRateThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archway.photosynthesis.v1.Query/RedemptionRateThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RedemptionRateThreshold(ctx, req.(*QueryRedemptionRateThresholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RedemptionIntervalThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedemptionIntervalThresholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RedemptionIntervalThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archway.photosynthesis.v1.Query/RedemptionIntervalThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RedemptionIntervalThreshold(ctx, req.(*QueryRedemptionIntervalThresholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakeRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeRatioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakeRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archway.photosynthesis.v1.Query/StakeRatio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakeRatio(ctx, req.(*QueryStakeRatioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllStakeRatios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStakeRatiosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllStakeRatios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archway.photosynthesis.v1.Query/AllStakeRatios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllStakeRatios(ctx, req.(*QueryAllStakeRatiosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RedeemTokenRatios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedeemTokenRatiosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RedeemTokenRatios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archway.photosynthesis.v1.Query/RedeemTokenRatios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RedeemTokenRatios(ctx, req.(*QueryRedeemTokenRatiosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalRedemptionAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalRedemptionAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalRedemptionAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archway.photosynthesis.v1.Query/TotalRedemptionAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalRedemptionAmount(ctx, req.(*QueryTotalRedemptionAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "archway.photosynthesis.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "TotalLiquidStake",
			Handler:    _Query_TotalLiquidStake_Handler,
		},
		{
			MethodName: "DepositRecords",
			Handler:    _Query_DepositRecords_Handler,
		},
		{
			MethodName: "RedemptionRateThreshold",
			Handler:    _Query_RedemptionRateThreshold_Handler,
		},
		{
			MethodName: "RedemptionIntervalThreshold",
			Handler:    _Query_RedemptionIntervalThreshold_Handler,
		},
		{
			MethodName: "StakeRatio",
			Handler:    _Query_StakeRatio_Handler,
		},
		{
			MethodName: "AllStakeRatios",
			Handler:    _Query_AllStakeRatios_Handler,
		},
		{
			MethodName: "RedeemTokenRatios",
			Handler:    _Query_RedeemTokenRatios_Handler,
		},
		{
			MethodName: "TotalRedemptionAmount",
			Handler:    _Query_TotalRedemptionAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "archway/photosynthesis/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalLiquidStakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalLiquidStakeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalLiquidStakeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalLiquidStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalLiquidStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalLiquidStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalLiquidStake) > 0 {
		i -= len(m.TotalLiquidStake)
		copy(dAtA[i:], m.TotalLiquidStake)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalLiquidStake)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepositRecords) > 0 {
		for iNdEx := len(m.DepositRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionRateThresholdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionRateThresholdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionRateThresholdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionRateThresholdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionRateThresholdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionRateThresholdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RedemptionRateThreshold != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RedemptionRateThreshold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionIntervalThresholdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionIntervalThresholdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionIntervalThresholdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionIntervalThresholdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionIntervalThresholdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionIntervalThresholdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RedemptionIntervalThreshold != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RedemptionIntervalThreshold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRatioRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRatioRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRatioRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRatioResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRatioResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRatioResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakeRatio) > 0 {
		i -= len(m.StakeRatio)
		copy(dAtA[i:], m.StakeRatio)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakeRatio)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStakeRatiosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakeRatiosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakeRatiosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllStakeRatiosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakeRatiosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakeRatiosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakeRatios) > 0 {
		for iNdEx := len(m.StakeRatios) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakeRatios[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StakeRatio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeRatio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeRatio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakeRatio) > 0 {
		i -= len(m.StakeRatio)
		copy(dAtA[i:], m.StakeRatio)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakeRatio)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedeemTokenRatiosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedeemTokenRatiosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedeemTokenRatiosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RedeemTokenRatio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedeemTokenRatio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedeemTokenRatio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedeemRatio) > 0 {
		i -= len(m.RedeemRatio)
		copy(dAtA[i:], m.RedeemRatio)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RedeemRatio)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedeemTokenRatiosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedeemTokenRatiosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedeemTokenRatiosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedeemRatios) > 0 {
		for iNdEx := len(m.RedeemRatios) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RedeemRatios[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRedeemTokenRatiosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRedeemTokenRatiosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRedeemTokenRatiosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllRedeemTokenRatiosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRedeemTokenRatiosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRedeemTokenRatiosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedeemTokenRatios) > 0 {
		for iNdEx := len(m.RedeemTokenRatios) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RedeemTokenRatios[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalRedemptionAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalRedemptionAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalRedemptionAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalRedemptionAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalRedemptionAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalRedemptionAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalAmount) > 0 {
		i -= len(m.TotalAmount)
		copy(dAtA[i:], m.TotalAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalAmount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalLiquidStakeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalLiquidStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TotalLiquidStake)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepositRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepositRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DepositRecords) > 0 {
		for _, e := range m.DepositRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRedemptionRateThresholdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRedemptionRateThresholdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RedemptionRateThreshold != 0 {
		n += 1 + sovQuery(uint64(m.RedemptionRateThreshold))
	}
	return n
}

func (m *QueryRedemptionIntervalThresholdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRedemptionIntervalThresholdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RedemptionIntervalThreshold != 0 {
		n += 1 + sovQuery(uint64(m.RedemptionIntervalThreshold))
	}
	return n
}

func (m *QueryStakeRatioRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakeRatioResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StakeRatio)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStakeRatiosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllStakeRatiosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakeRatios) > 0 {
		for _, e := range m.StakeRatios {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *StakeRatio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StakeRatio)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRedeemTokenRatiosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RedeemTokenRatio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RedeemRatio)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRedeemTokenRatiosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RedeemRatios) > 0 {
		for _, e := range m.RedeemRatios {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllRedeemTokenRatiosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllRedeemTokenRatiosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RedeemTokenRatios) > 0 {
		for _, e := range m.RedeemTokenRatios {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTotalRedemptionAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalRedemptionAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TotalAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalLiquidStakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalLiquidStakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalLiquidStakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalLiquidStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalLiquidStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalLiquidStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalLiquidStake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositRecords = append(m.DepositRecords, &DepositRecord{})
			if err := m.DepositRecords[len(m.DepositRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionRateThresholdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionRateThresholdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionRateThresholdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionRateThresholdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionRateThresholdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionRateThresholdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRateThreshold", wireType)
			}
			m.RedemptionRateThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedemptionRateThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionIntervalThresholdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionIntervalThresholdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionIntervalThresholdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionIntervalThresholdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionIntervalThresholdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionIntervalThresholdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionIntervalThreshold", wireType)
			}
			m.RedemptionIntervalThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedemptionIntervalThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRatioRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRatioRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRatioRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRatioResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRatioResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRatioResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakeRatiosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakeRatiosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakeRatiosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakeRatiosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakeRatiosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakeRatiosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRatios", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeRatios = append(m.StakeRatios, &StakeRatio{})
			if err := m.StakeRatios[len(m.StakeRatios)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakeRatio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeRatio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeRatio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedeemTokenRatiosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedeemTokenRatiosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedeemTokenRatiosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedeemTokenRatio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedeemTokenRatio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedeemTokenRatio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedeemRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedeemTokenRatiosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedeemTokenRatiosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedeemTokenRatiosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemRatios", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedeemRatios = append(m.RedeemRatios, &RedeemTokenRatio{})
			if err := m.RedeemRatios[len(m.RedeemRatios)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRedeemTokenRatiosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRedeemTokenRatiosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRedeemTokenRatiosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRedeemTokenRatiosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRedeemTokenRatiosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRedeemTokenRatiosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemTokenRatios", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedeemTokenRatios = append(m.RedeemTokenRatios, &RedeemTokenRatio{})
			if err := m.RedeemTokenRatios[len(m.RedeemTokenRatios)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalRedemptionAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalRedemptionAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalRedemptionAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalRedemptionAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalRedemptionAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalRedemptionAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
