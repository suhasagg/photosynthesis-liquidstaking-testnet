// DONTCOVER
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: archway/photosynthesis/photosynthesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Task is an enumeration for identifying the different types of tasks in the
// module.
type Task int32

const (
	Task_TASK_UNSPECIFIED           Task = 0
	Task_TASK_LIQUID_STAKING        Task = 1
	Task_TASK_ARCH_LIQUID_STAKE     Task = 2
	Task_TASK_REDEMPTION_RATE_QUERY Task = 3
	Task_TASK_REWARDS_WITHDRAWAL    Task = 4
)

var Task_name = map[int32]string{
	0: "TASK_UNSPECIFIED",
	1: "TASK_LIQUID_STAKING",
	2: "TASK_ARCH_LIQUID_STAKE",
	3: "TASK_REDEMPTION_RATE_QUERY",
	4: "TASK_REWARDS_WITHDRAWAL",
}

var Task_value = map[string]int32{
	"TASK_UNSPECIFIED":           0,
	"TASK_LIQUID_STAKING":        1,
	"TASK_ARCH_LIQUID_STAKE":     2,
	"TASK_REDEMPTION_RATE_QUERY": 3,
	"TASK_REWARDS_WITHDRAWAL":    4,
}

func (x Task) String() string {
	return proto.EnumName(Task_name, int32(x))
}

func (Task) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84759081a75ba054, []int{0}
}

// Params defines the parameters for the photosynthesis module.
type Params struct {
	LiquidStakingInterval       int64 `protobuf:"varint,1,opt,name=liquid_staking_interval,json=liquidStakingInterval,proto3" json:"liquid_staking_interval,omitempty"`
	ArchLiquidStakeInterval     int64 `protobuf:"varint,2,opt,name=arch_liquid_stake_interval,json=archLiquidStakeInterval,proto3" json:"arch_liquid_stake_interval,omitempty"`
	RedemptionRateQueryInterval int64 `protobuf:"varint,3,opt,name=redemption_rate_query_interval,json=redemptionRateQueryInterval,proto3" json:"redemption_rate_query_interval,omitempty"`
	RedemptionRateThreshold     int64 `protobuf:"varint,4,opt,name=redemption_rate_threshold,json=redemptionRateThreshold,proto3" json:"redemption_rate_threshold,omitempty"`
	RedemptionIntervalThreshold int64 `protobuf:"varint,5,opt,name=redemption_interval_threshold,json=redemptionIntervalThreshold,proto3" json:"redemption_interval_threshold,omitempty"`
	RewardsWithdrawalInterval   int64 `protobuf:"varint,6,opt,name=rewards_withdrawal_interval,json=rewardsWithdrawalInterval,proto3" json:"rewards_withdrawal_interval,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_84759081a75ba054, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetLiquidStakingInterval() int64 {
	if m != nil {
		return m.LiquidStakingInterval
	}
	return 0
}

func (m *Params) GetArchLiquidStakeInterval() int64 {
	if m != nil {
		return m.ArchLiquidStakeInterval
	}
	return 0
}

func (m *Params) GetRedemptionRateQueryInterval() int64 {
	if m != nil {
		return m.RedemptionRateQueryInterval
	}
	return 0
}

func (m *Params) GetRedemptionRateThreshold() int64 {
	if m != nil {
		return m.RedemptionRateThreshold
	}
	return 0
}

func (m *Params) GetRedemptionIntervalThreshold() int64 {
	if m != nil {
		return m.RedemptionIntervalThreshold
	}
	return 0
}

func (m *Params) GetRewardsWithdrawalInterval() int64 {
	if m != nil {
		return m.RewardsWithdrawalInterval
	}
	return 0
}

// DepositRecord represents a record of a deposit for staking or liquid staking.
type DepositRecord struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Amount          int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Status          string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *DepositRecord) Reset()         { *m = DepositRecord{} }
func (m *DepositRecord) String() string { return proto.CompactTextString(m) }
func (*DepositRecord) ProtoMessage()    {}
func (*DepositRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_84759081a75ba054, []int{1}
}
func (m *DepositRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositRecord.Merge(m, src)
}
func (m *DepositRecord) XXX_Size() int {
	return m.Size()
}
func (m *DepositRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DepositRecord proto.InternalMessageInfo

func (m *DepositRecord) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *DepositRecord) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *DepositRecord) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// Contract represents a registered contract in the photosynthesis module.
type Contract struct {
	Address                     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	LiquidityProviderAddress    string `protobuf:"bytes,2,opt,name=liquidity_provider_address,json=liquidityProviderAddress,proto3" json:"liquidity_provider_address,omitempty"`
	RewardsAddress              string `protobuf:"bytes,3,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
	MinimumRewardAmount         uint64 `protobuf:"varint,4,opt,name=minimum_reward_amount,json=minimumRewardAmount,proto3" json:"minimum_reward_amount,omitempty"`
	LiquidStakeInterval         uint64 `protobuf:"varint,5,opt,name=liquid_stake_interval,json=liquidStakeInterval,proto3" json:"liquid_stake_interval,omitempty"`
	RedemptionRateThreshold     int64  `protobuf:"varint,6,opt,name=redemption_rate_threshold,json=redemptionRateThreshold,proto3" json:"redemption_rate_threshold,omitempty"`
	RedemptionIntervalThreshold uint64 `protobuf:"varint,7,opt,name=redemption_interval_threshold,json=redemptionIntervalThreshold,proto3" json:"redemption_interval_threshold,omitempty"`
	RewardsWithdrawalInterval   uint64 `protobuf:"varint,8,opt,name=rewards_withdrawal_interval,json=rewardsWithdrawalInterval,proto3" json:"rewards_withdrawal_interval,omitempty"`
}

func (m *Contract) Reset()         { *m = Contract{} }
func (m *Contract) String() string { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()    {}
func (*Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_84759081a75ba054, []int{2}
}
func (m *Contract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contract.Merge(m, src)
}
func (m *Contract) XXX_Size() int {
	return m.Size()
}
func (m *Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contract proto.InternalMessageInfo

func (m *Contract) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Contract) GetLiquidityProviderAddress() string {
	if m != nil {
		return m.LiquidityProviderAddress
	}
	return ""
}

func (m *Contract) GetRewardsAddress() string {
	if m != nil {
		return m.RewardsAddress
	}
	return ""
}

func (m *Contract) GetMinimumRewardAmount() uint64 {
	if m != nil {
		return m.MinimumRewardAmount
	}
	return 0
}

func (m *Contract) GetLiquidStakeInterval() uint64 {
	if m != nil {
		return m.LiquidStakeInterval
	}
	return 0
}

func (m *Contract) GetRedemptionRateThreshold() int64 {
	if m != nil {
		return m.RedemptionRateThreshold
	}
	return 0
}

func (m *Contract) GetRedemptionIntervalThreshold() uint64 {
	if m != nil {
		return m.RedemptionIntervalThreshold
	}
	return 0
}

func (m *Contract) GetRewardsWithdrawalInterval() uint64 {
	if m != nil {
		return m.RewardsWithdrawalInterval
	}
	return 0
}

// Coin defines a token with a denomination and an amount.
type Coin struct {
	Denom  string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *Coin) Reset()         { *m = Coin{} }
func (m *Coin) String() string { return proto.CompactTextString(m) }
func (*Coin) ProtoMessage()    {}
func (*Coin) Descriptor() ([]byte, []int) {
	return fileDescriptor_84759081a75ba054, []int{3}
}
func (m *Coin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Coin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coin.Merge(m, src)
}
func (m *Coin) XXX_Size() int {
	return m.Size()
}
func (m *Coin) XXX_DiscardUnknown() {
	xxx_messageInfo_Coin.DiscardUnknown(m)
}

var xxx_messageInfo_Coin proto.InternalMessageInfo

func (m *Coin) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Coin) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// DepositRecords is a collection of deposit records for a contract.
type DepositRecords struct {
	Records []*DepositRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *DepositRecords) Reset()         { *m = DepositRecords{} }
func (m *DepositRecords) String() string { return proto.CompactTextString(m) }
func (*DepositRecords) ProtoMessage()    {}
func (*DepositRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_84759081a75ba054, []int{4}
}
func (m *DepositRecords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositRecords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositRecords.Merge(m, src)
}
func (m *DepositRecords) XXX_Size() int {
	return m.Size()
}
func (m *DepositRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositRecords.DiscardUnknown(m)
}

var xxx_messageInfo_DepositRecords proto.InternalMessageInfo

func (m *DepositRecords) GetRecords() []*DepositRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func init() {
	proto.RegisterEnum("archway.photosynthesis.v1.Task", Task_name, Task_value)
	proto.RegisterType((*Params)(nil), "archway.photosynthesis.v1.Params")
	proto.RegisterType((*DepositRecord)(nil), "archway.photosynthesis.v1.DepositRecord")
	proto.RegisterType((*Contract)(nil), "archway.photosynthesis.v1.Contract")
	proto.RegisterType((*Coin)(nil), "archway.photosynthesis.v1.Coin")
	proto.RegisterType((*DepositRecords)(nil), "archway.photosynthesis.v1.DepositRecords")
}

func init() {
	proto.RegisterFile("archway/photosynthesis/photosynthesis.proto", fileDescriptor_84759081a75ba054)
}

var fileDescriptor_84759081a75ba054 = []byte{
	// 689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcb, 0x4e, 0x1b, 0x3b,
	0x18, 0xce, 0x90, 0x10, 0xc0, 0x47, 0x07, 0x22, 0x73, 0x49, 0x08, 0x3a, 0x23, 0x94, 0xcd, 0xa1,
	0xad, 0x9a, 0x08, 0x5a, 0x55, 0xea, 0x45, 0x95, 0x86, 0x24, 0x2d, 0x23, 0x28, 0x0d, 0x93, 0x41,
	0x51, 0xbb, 0xb1, 0x9c, 0x8c, 0x95, 0x71, 0xc9, 0x8c, 0x83, 0xed, 0x24, 0xcd, 0xb6, 0x0f, 0x50,
	0xf5, 0x5d, 0xfa, 0x12, 0x5d, 0xb2, 0xec, 0xb2, 0x82, 0x17, 0xa9, 0xe2, 0xf1, 0xe4, 0x26, 0x60,
	0xc3, 0xce, 0xff, 0xff, 0x5d, 0xfc, 0xdb, 0xfe, 0x64, 0xf0, 0x04, 0xf3, 0x96, 0x3f, 0xc0, 0xc3,
	0x52, 0xd7, 0x67, 0x92, 0x89, 0x61, 0x28, 0x7d, 0x22, 0xa8, 0x98, 0x2b, 0x8b, 0x5d, 0xce, 0x24,
	0x83, 0xdb, 0x9a, 0x5c, 0x9c, 0x43, 0xfb, 0xfb, 0xf9, 0x8d, 0x36, 0x6b, 0x33, 0xc5, 0x2a, 0x8d,
	0x56, 0x91, 0x20, 0x6f, 0xb6, 0x98, 0x08, 0x98, 0x28, 0x35, 0xb1, 0x20, 0xa5, 0xfe, 0x7e, 0x93,
	0x48, 0xbc, 0x5f, 0x6a, 0x31, 0x1a, 0x46, 0x78, 0xe1, 0x5b, 0x12, 0xa4, 0x6b, 0x98, 0xe3, 0x40,
	0xc0, 0x17, 0x20, 0xdb, 0xa1, 0x97, 0x3d, 0xea, 0x21, 0x21, 0xf1, 0x05, 0x0d, 0xdb, 0x88, 0x86,
	0x92, 0xf0, 0x3e, 0xee, 0xe4, 0x8c, 0x5d, 0x63, 0x2f, 0xe9, 0x6c, 0x46, 0x70, 0x3d, 0x42, 0x6d,
	0x0d, 0xc2, 0xd7, 0x20, 0x3f, 0x9a, 0x0a, 0x4d, 0x89, 0xc9, 0x44, 0xba, 0xa0, 0xa4, 0xd9, 0x11,
	0xe3, 0x64, 0x2c, 0x27, 0x63, 0x71, 0x19, 0x98, 0x9c, 0x78, 0x24, 0xe8, 0x4a, 0xca, 0x42, 0xc4,
	0xb1, 0x24, 0xe8, 0xb2, 0x47, 0xf8, 0x70, 0x62, 0x90, 0x54, 0x06, 0x3b, 0x13, 0x96, 0x83, 0x25,
	0x39, 0x1b, 0x71, 0xc6, 0x26, 0xaf, 0xc0, 0xf6, 0xbc, 0x89, 0xf4, 0x39, 0x11, 0x3e, 0xeb, 0x78,
	0xb9, 0x54, 0x34, 0xc0, 0xac, 0xde, 0x8d, 0x61, 0x78, 0x08, 0xfe, 0x9b, 0xd2, 0xc6, 0xbb, 0x4e,
	0xe9, 0x17, 0xe7, 0xf7, 0x8f, 0xb7, 0x9d, 0x78, 0xbc, 0x05, 0x3b, 0x9c, 0x0c, 0x30, 0xf7, 0x04,
	0x1a, 0x50, 0xe9, 0x7b, 0x1c, 0x0f, 0x70, 0x67, 0x72, 0x82, 0xb4, 0x72, 0xd8, 0xd6, 0x94, 0xc6,
	0x98, 0x11, 0x1b, 0x15, 0xbe, 0x80, 0x7f, 0x2b, 0xa4, 0xcb, 0x04, 0x95, 0x0e, 0x69, 0x31, 0xee,
	0xc1, 0x47, 0x20, 0xd3, 0x62, 0xa1, 0xe4, 0xb8, 0x25, 0x11, 0xf6, 0x3c, 0x4e, 0x84, 0x50, 0x6f,
	0xb0, 0xe2, 0xac, 0xc5, 0x7d, 0x2b, 0x6a, 0xc3, 0x2d, 0x90, 0xc6, 0x01, 0xeb, 0x85, 0x52, 0xdf,
	0xb4, 0xae, 0x46, 0x7d, 0x21, 0xb1, 0xec, 0x09, 0x75, 0x81, 0x2b, 0x8e, 0xae, 0x0a, 0x3f, 0x93,
	0x60, 0xb9, 0xac, 0x3d, 0x60, 0x0e, 0x2c, 0xcd, 0xda, 0xc7, 0x25, 0x7c, 0x03, 0xf2, 0xd1, 0x7b,
	0x52, 0x39, 0x44, 0x5d, 0xce, 0xfa, 0xd4, 0x23, 0x7c, 0x3c, 0xcb, 0x82, 0x22, 0xe7, 0xc6, 0x8c,
	0x9a, 0x26, 0xc4, 0x43, 0xfd, 0x0f, 0xd6, 0xe2, 0x0b, 0x89, 0x25, 0xd1, 0x14, 0xab, 0xba, 0x1d,
	0x13, 0x0f, 0xc0, 0x66, 0x40, 0x43, 0x1a, 0xf4, 0x02, 0x14, 0x21, 0x48, 0x1f, 0x66, 0xf4, 0x6a,
	0x29, 0x67, 0x5d, 0x83, 0x8e, 0xc2, 0xac, 0xe8, 0x64, 0x07, 0x60, 0xf3, 0xf6, 0xa8, 0x2d, 0x46,
	0x9a, 0xce, 0x2d, 0x31, 0xbb, 0x37, 0x21, 0xe9, 0x07, 0x26, 0x64, 0x49, 0xed, 0xfb, 0x90, 0x84,
	0x2c, 0x2b, 0x87, 0x7b, 0x12, 0xf2, 0x1c, 0xa4, 0xca, 0x8c, 0x86, 0x70, 0x03, 0x2c, 0x7a, 0x24,
	0x64, 0x81, 0x7e, 0xae, 0xa8, 0xb8, 0x2b, 0x03, 0x05, 0x17, 0xac, 0xce, 0xe4, 0x4a, 0xc0, 0x43,
	0xb0, 0xc4, 0xa3, 0x65, 0xce, 0xd8, 0x4d, 0xee, 0xfd, 0x73, 0xb0, 0x57, 0xbc, 0xf3, 0x47, 0x29,
	0xce, 0x68, 0x9d, 0x58, 0xf8, 0xf8, 0xbb, 0x01, 0x52, 0x2e, 0x16, 0x17, 0x70, 0x03, 0x64, 0x5c,
	0xab, 0x7e, 0x8c, 0xce, 0x4f, 0xeb, 0xb5, 0x6a, 0xd9, 0x7e, 0x67, 0x57, 0x2b, 0x99, 0x04, 0xcc,
	0x82, 0x75, 0xd5, 0x3d, 0xb1, 0xcf, 0xce, 0xed, 0x0a, 0xaa, 0xbb, 0xd6, 0xb1, 0x7d, 0xfa, 0x3e,
	0x63, 0xc0, 0x3c, 0xd8, 0x52, 0x80, 0xe5, 0x94, 0x8f, 0xa6, 0xd1, 0x6a, 0x66, 0x01, 0x9a, 0x20,
	0xaf, 0x30, 0xa7, 0x5a, 0xa9, 0x7e, 0xa8, 0xb9, 0xf6, 0xc7, 0x53, 0xe4, 0x58, 0x6e, 0x15, 0x9d,
	0x9d, 0x57, 0x9d, 0x4f, 0x99, 0x24, 0xdc, 0x01, 0x59, 0x8d, 0x37, 0x2c, 0xa7, 0x52, 0x47, 0x0d,
	0xdb, 0x3d, 0xaa, 0x38, 0x56, 0xc3, 0x3a, 0xc9, 0xa4, 0x0e, 0xeb, 0xbf, 0xae, 0x4d, 0xe3, 0xea,
	0xda, 0x34, 0xfe, 0x5c, 0x9b, 0xc6, 0x8f, 0x1b, 0x33, 0x71, 0x75, 0x63, 0x26, 0x7e, 0xdf, 0x98,
	0x89, 0xcf, 0x2f, 0xdb, 0x54, 0xfa, 0xbd, 0x66, 0xb1, 0xc5, 0x82, 0x92, 0x3e, 0xe7, 0xd3, 0x90,
	0xc8, 0x01, 0xe3, 0x17, 0x71, 0x5d, 0xfa, 0x3a, 0xff, 0xf1, 0xca, 0x61, 0x97, 0x88, 0x66, 0x5a,
	0xfd, 0x8f, 0xcf, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xae, 0x39, 0xa5, 0x1e, 0x9f, 0x05, 0x00,
	0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardsWithdrawalInterval != 0 {
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(m.RewardsWithdrawalInterval))
		i--
		dAtA[i] = 0x30
	}
	if m.RedemptionIntervalThreshold != 0 {
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(m.RedemptionIntervalThreshold))
		i--
		dAtA[i] = 0x28
	}
	if m.RedemptionRateThreshold != 0 {
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(m.RedemptionRateThreshold))
		i--
		dAtA[i] = 0x20
	}
	if m.RedemptionRateQueryInterval != 0 {
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(m.RedemptionRateQueryInterval))
		i--
		dAtA[i] = 0x18
	}
	if m.ArchLiquidStakeInterval != 0 {
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(m.ArchLiquidStakeInterval))
		i--
		dAtA[i] = 0x10
	}
	if m.LiquidStakingInterval != 0 {
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(m.LiquidStakingInterval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DepositRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Contract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardsWithdrawalInterval != 0 {
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(m.RewardsWithdrawalInterval))
		i--
		dAtA[i] = 0x40
	}
	if m.RedemptionIntervalThreshold != 0 {
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(m.RedemptionIntervalThreshold))
		i--
		dAtA[i] = 0x38
	}
	if m.RedemptionRateThreshold != 0 {
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(m.RedemptionRateThreshold))
		i--
		dAtA[i] = 0x30
	}
	if m.LiquidStakeInterval != 0 {
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(m.LiquidStakeInterval))
		i--
		dAtA[i] = 0x28
	}
	if m.MinimumRewardAmount != 0 {
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(m.MinimumRewardAmount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RewardsAddress) > 0 {
		i -= len(m.RewardsAddress)
		copy(dAtA[i:], m.RewardsAddress)
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(len(m.RewardsAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LiquidityProviderAddress) > 0 {
		i -= len(m.LiquidityProviderAddress)
		copy(dAtA[i:], m.LiquidityProviderAddress)
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(len(m.LiquidityProviderAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Coin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Coin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintPhotosynthesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DepositRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositRecords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositRecords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPhotosynthesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPhotosynthesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovPhotosynthesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiquidStakingInterval != 0 {
		n += 1 + sovPhotosynthesis(uint64(m.LiquidStakingInterval))
	}
	if m.ArchLiquidStakeInterval != 0 {
		n += 1 + sovPhotosynthesis(uint64(m.ArchLiquidStakeInterval))
	}
	if m.RedemptionRateQueryInterval != 0 {
		n += 1 + sovPhotosynthesis(uint64(m.RedemptionRateQueryInterval))
	}
	if m.RedemptionRateThreshold != 0 {
		n += 1 + sovPhotosynthesis(uint64(m.RedemptionRateThreshold))
	}
	if m.RedemptionIntervalThreshold != 0 {
		n += 1 + sovPhotosynthesis(uint64(m.RedemptionIntervalThreshold))
	}
	if m.RewardsWithdrawalInterval != 0 {
		n += 1 + sovPhotosynthesis(uint64(m.RewardsWithdrawalInterval))
	}
	return n
}

func (m *DepositRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovPhotosynthesis(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovPhotosynthesis(uint64(m.Amount))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovPhotosynthesis(uint64(l))
	}
	return n
}

func (m *Contract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPhotosynthesis(uint64(l))
	}
	l = len(m.LiquidityProviderAddress)
	if l > 0 {
		n += 1 + l + sovPhotosynthesis(uint64(l))
	}
	l = len(m.RewardsAddress)
	if l > 0 {
		n += 1 + l + sovPhotosynthesis(uint64(l))
	}
	if m.MinimumRewardAmount != 0 {
		n += 1 + sovPhotosynthesis(uint64(m.MinimumRewardAmount))
	}
	if m.LiquidStakeInterval != 0 {
		n += 1 + sovPhotosynthesis(uint64(m.LiquidStakeInterval))
	}
	if m.RedemptionRateThreshold != 0 {
		n += 1 + sovPhotosynthesis(uint64(m.RedemptionRateThreshold))
	}
	if m.RedemptionIntervalThreshold != 0 {
		n += 1 + sovPhotosynthesis(uint64(m.RedemptionIntervalThreshold))
	}
	if m.RewardsWithdrawalInterval != 0 {
		n += 1 + sovPhotosynthesis(uint64(m.RewardsWithdrawalInterval))
	}
	return n
}

func (m *Coin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovPhotosynthesis(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovPhotosynthesis(uint64(m.Amount))
	}
	return n
}

func (m *DepositRecords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovPhotosynthesis(uint64(l))
		}
	}
	return n
}

func sovPhotosynthesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPhotosynthesis(x uint64) (n int) {
	return sovPhotosynthesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhotosynthesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidStakingInterval", wireType)
			}
			m.LiquidStakingInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidStakingInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArchLiquidStakeInterval", wireType)
			}
			m.ArchLiquidStakeInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArchLiquidStakeInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRateQueryInterval", wireType)
			}
			m.RedemptionRateQueryInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedemptionRateQueryInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRateThreshold", wireType)
			}
			m.RedemptionRateThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedemptionRateThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionIntervalThreshold", wireType)
			}
			m.RedemptionIntervalThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedemptionIntervalThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsWithdrawalInterval", wireType)
			}
			m.RewardsWithdrawalInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardsWithdrawalInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhotosynthesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhotosynthesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhotosynthesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhotosynthesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumRewardAmount", wireType)
			}
			m.MinimumRewardAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumRewardAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidStakeInterval", wireType)
			}
			m.LiquidStakeInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidStakeInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRateThreshold", wireType)
			}
			m.RedemptionRateThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedemptionRateThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionIntervalThreshold", wireType)
			}
			m.RedemptionIntervalThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedemptionIntervalThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsWithdrawalInterval", wireType)
			}
			m.RewardsWithdrawalInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardsWithdrawalInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhotosynthesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Coin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhotosynthesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhotosynthesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhotosynthesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &DepositRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhotosynthesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhotosynthesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPhotosynthesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPhotosynthesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhotosynthesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPhotosynthesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPhotosynthesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPhotosynthesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPhotosynthesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPhotosynthesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPhotosynthesis = fmt.Errorf("proto: unexpected end of group")
)
